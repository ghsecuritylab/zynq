/******************************************************************************
*
* Copyright (C) 2017 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

#include <stdio.h>
#include "xparameters.h"
#include "netif/xadapter.h"
#include "platform.h"
#include "platform_config.h"
#include "lwipopts.h"
#include "xil_printf.h"
#include "sleep.h"
#include "lwip/priv/tcp_priv.h"
#include "lwip/init.h"
#include "lwip/inet.h"
#include "xil_cache.h"
#include "xv_tpg.h"
#include "xaxivdma.h"
# include "xscugic.h"
#include "display_demo.h"
#if LWIP_DHCP==1
#include "lwip/dhcp.h"
extern volatile int dhcp_timoutcntr;
#endif

extern volatile int TcpFastTmrFlag;
extern volatile int TcpSlowTmrFlag;

#define DEFAULT_IP_ADDRESS	"10.88.19.18"
#define DEFAULT_IP_MASK		"255.255.254.0"
#define DEFAULT_GW_ADDRESS	"10.88.19.254"

void platform_enable_interrupts(void);
void start_application(void);
void print_app_header(void);

#if defined (__arm__) && !defined (ARMR5)
#if XPAR_GIGE_PCS_PMA_SGMII_CORE_PRESENT == 1 || \
		 XPAR_GIGE_PCS_PMA_1000BASEX_CORE_PRESENT == 1
int ProgramSi5324(void);
int ProgramSfpPhy(void);
#endif
#endif

#ifdef XPS_BOARD_ZCU102
#ifdef XPAR_XIICPS_0_DEVICE_ID
int IicPhyReset(void);
#endif
#endif

//-----------------------------------------------------------------------------------------------
/*
 * XPAR redefines
 */
#define DYNCLK_BASEADDR XPAR_AXI_DYNCLK_0_BASEADDR

/* ------------------------------------------------------------ */
/*				Global Variables								*/
/* ------------------------------------------------------------ */


/*
 * Display Driver structs
 */

XAxiVdma vdma_vout;

XScuGic XScuGicInstance;

XAxiVdma vdma_vin[2];

XV_tpg inst_tpg0;
XV_tpg inst_tpg1;

static int WriteError;

int wr_index[2]={0,0};
int rd_index[2]={0,0};
int frame_length_curr;
char buf1[3] = {1,0,0};
char buf2[3] = {2,0,0};
/*
 * Framebuffers for video data
 */
u8 frameBuf0[DISPLAY_NUM_FRAMES][DEMO_MAX_FRAME] __attribute__ ((aligned(64)));
u8 frameBuf1[DISPLAY_NUM_FRAMES][DEMO_MAX_FRAME] __attribute__ ((aligned(64)));
u8 *pFrames0[DISPLAY_NUM_FRAMES]; //array of pointers to the frame buffers
u8 *pFrames1[DISPLAY_NUM_FRAMES];
int WriteOneFrameEnd[2]={-1,-1};

/* ------------------------------------------------------------ */
/*				Procedure Definitions							*/
/* ------------------------------------------------------------ */
static void WriteCallBack0(void *CallbackRef, u32 Mask);
static void WriteCallBack1(void *CallbackRef, u32 Mask);
static void WriteErrorCallBack(void *CallbackRef, u32 Mask);
int transfer_data(const char *pData, int cam, int seq, int len);
int InterruptConnect(XScuGic *XScuGicInstancePtr,u32 Int_Id,void * Handler,void *CallBackRef);
int vdma_write_start(XAxiVdma *Vdma);
int vdma_write_init(short DeviceID,XAxiVdma *Vdma,short HoriSizeInput,short VertSizeInput,short Stride,unsigned int FrameStoreStartAddr0,unsigned int FrameStoreStartAddr1,unsigned int FrameStoreStartAddr2);
int InterruptInit(u16 DeviceId,XScuGic *XScuGicInstancePtr);
//------------------------------------------------------------------------------------------------
//------------------------------------------------------------ functions for VDMA and TPG
void init_tpg(){

	XV_tpg_Initialize(&inst_tpg0, 0);
	XV_tpg_Initialize(&inst_tpg1, 1);
	XV_tpg_Set_height(&inst_tpg0, IMG_H);
	XV_tpg_Set_height(&inst_tpg1, IMG_H);
	XV_tpg_Set_width(&inst_tpg1, IMG_W);
	XV_tpg_Set_width(&inst_tpg0, IMG_W);
	XV_tpg_Set_motionSpeed(&inst_tpg0, 1);
	XV_tpg_Set_motionSpeed(&inst_tpg1, 1);
	XV_tpg_Set_bckgndId(&inst_tpg0, 0x9);		//color sweep
	XV_tpg_Set_bckgndId(&inst_tpg1, 0xd);
	XV_tpg_Set_ovrlayId(&inst_tpg0, 0x2); 		//moving box
	XV_tpg_Set_ovrlayId(&inst_tpg1, 0x1);
	XV_tpg_Set_boxSize(&inst_tpg1, 50);
	XV_tpg_Set_boxColorR(&inst_tpg1, 0x66);		//a favorate color
	XV_tpg_Set_boxColorG(&inst_tpg1, 0xcd);
	XV_tpg_Set_boxColorB(&inst_tpg1, 0xaa);
	XV_tpg_Set_boxSize(&inst_tpg0, 50);
	XV_tpg_Set_boxColorR(&inst_tpg0, 0x66);		//a favorate color
	XV_tpg_Set_boxColorG(&inst_tpg0, 0xcd);
	XV_tpg_Set_boxColorB(&inst_tpg0, 0xaa);
	XV_tpg_Set_crossHairX(&inst_tpg0, 100)
	XV_tpg_Set_crossHairY(&inst_tpg0, 100)
	XV_tpg_EnableAutoRestart(&inst_tpg0);
	XV_tpg_EnableAutoRestart(&inst_tpg1);
	XV_tpg_Start(&inst_tpg0);
	XV_tpg_Start(&inst_tpg1);
	//wait for tpg to be ready
	while(1)if (inst_tpg0.IsReady == XIL_COMPONENT_IS_READY && inst_tpg1.IsReady == XIL_COMPONENT_IS_READY)return;

}


void init_vdma(){


	InterruptConnect(&XScuGicInstance,XPAR_FABRIC_AXI_VDMA_0_S2MM_INTROUT_INTR,XAxiVdma_WriteIntrHandler,(void *)&vdma_vin[0]);
	InterruptConnect(&XScuGicInstance,XPAR_FABRIC_AXI_VDMA_1_S2MM_INTROUT_INTR,XAxiVdma_WriteIntrHandler,(void *)&vdma_vin[1]);
	vdma_write_init(XPAR_AXIVDMA_0_DEVICE_ID, &vdma_vin[0], IMG_W * 3, IMG_H, IMG_W * 3,
			(unsigned int)pFrames0[0], (unsigned int)pFrames0[1], (unsigned int)pFrames0[2]);
	vdma_write_init(XPAR_AXIVDMA_1_DEVICE_ID, &vdma_vin[1], IMG_W * 3, IMG_H, IMG_W * 3,
					(unsigned int)pFrames1[0], (unsigned int)pFrames1[1], (unsigned int)pFrames1[2]);
	XAxiVdma_SetCallBack(&vdma_vin[0], XAXIVDMA_HANDLER_GENERAL,WriteCallBack0, (void *)&vdma_vin[0], XAXIVDMA_WRITE);
	XAxiVdma_SetCallBack(&vdma_vin[0], XAXIVDMA_HANDLER_ERROR,WriteErrorCallBack, (void *)&vdma_vin[0], XAXIVDMA_WRITE);


	XAxiVdma_SetCallBack(&vdma_vin[1], XAXIVDMA_HANDLER_GENERAL,WriteCallBack1, (void *)&vdma_vin[1], XAXIVDMA_WRITE);
	XAxiVdma_SetCallBack(&vdma_vin[1], XAXIVDMA_HANDLER_ERROR,WriteErrorCallBack, (void *)&vdma_vin[1], XAXIVDMA_WRITE);
	/* Start vdma write process, enable vdma interrupt */
	XAxiVdma_IntrEnable(&vdma_vin[0], XAXIVDMA_IXR_ALL_MASK, XAXIVDMA_WRITE);
	vdma_write_start(&vdma_vin[0]);
	XAxiVdma_IntrEnable(&vdma_vin[1], XAXIVDMA_IXR_ALL_MASK, XAXIVDMA_WRITE);
	vdma_write_start(&vdma_vin[1]);
	frame_length_curr = IMG_W*IMG_H*3;
}
//------------------------------------------------------------ end functions for VDMA and TPG



//------------------------------------------------------------ functions for ethernet
struct netif server_netif;

static void print_ip(char *msg, ip_addr_t *ip)
{
	print(msg);
	xil_printf("%d.%d.%d.%d\r\n", ip4_addr1(ip), ip4_addr2(ip),
			ip4_addr3(ip), ip4_addr4(ip));
}

static void print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw)
{
	print_ip("Board IP:       ", ip);
	print_ip("Netmask :       ", mask);
	print_ip("Gateway :       ", gw);
}

static void assign_default_ip(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw)
{
	int err;

	xil_printf("Configuring default IP %s \r\n", DEFAULT_IP_ADDRESS);

	err = inet_aton(DEFAULT_IP_ADDRESS, ip);
	if (!err)
		xil_printf("Invalid default IP address: %d\r\n", err);

	err = inet_aton(DEFAULT_IP_MASK, mask);
	if (!err)
		xil_printf("Invalid default IP MASK: %d\r\n", err);

	err = inet_aton(DEFAULT_GW_ADDRESS, gw);
	if (!err)
		xil_printf("Invalid default gateway address: %d\r\n", err);
}

int main(void)
{
		/*
		 * Initialize an array of pointers to the 3 frame buffers
		 */
		for (int i = 0; i < DISPLAY_NUM_FRAMES; i++)
		{
			pFrames0[i] = frameBuf0[i];
			pFrames1[i] = frameBuf1[i];
			memset(pFrames0[i], 0, DEMO_MAX_FRAME);
			Xil_DCacheFlushRange((INTPTR) pFrames0[i], DEMO_MAX_FRAME) ;
			memset(pFrames1[i], 0, DEMO_MAX_FRAME);
			Xil_DCacheFlushRange((INTPTR) pFrames1[i], DEMO_MAX_FRAME) ;
		}
		InterruptInit(XPAR_XSCUTIMER_0_DEVICE_ID,&XScuGicInstance);

		//-----------------------------------
	struct netif *netif;

	/* the mac address of the board. this should be unique per board */
	unsigned char mac_ethernet_address[] = {
		0xb0, 0x0b, 0xb0, 0x0b, 0xba, 0xbe };
	netif = &server_netif;
#if defined (__arm__) && !defined (ARMR5)
#if XPAR_GIGE_PCS_PMA_SGMII_CORE_PRESENT == 1 || \
		XPAR_GIGE_PCS_PMA_1000BASEX_CORE_PRESENT == 1
	ProgramSi5324();
	ProgramSfpPhy();
#endif
#endif

	/* Define this board specific macro in order perform PHY reset
	 * on ZCU102
	 */
#ifdef XPS_BOARD_ZCU102
	IicPhyReset();
#endif

	init_platform();

	xil_printf("\r\n\r\n");
	xil_printf("-----lwIP RAW Mode UDP Server Application-----\r\n");

	/* initialize lwIP */
	lwip_init();

	/* Add network interface to the netif_list, and set it as default */
	if (!xemac_add(netif, NULL, NULL, NULL, mac_ethernet_address,
				PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\r\n");
		return -1;
	}
	netif_set_default(netif);

	/* now enable interrupts */
	platform_enable_interrupts();

	/* specify that the network if is up */
	netif_set_up(netif);

#if (LWIP_DHCP==1)
	/* Create a new DHCP client for this interface.
	 * Note: you must call dhcp_fine_tmr() and dhcp_coarse_tmr() at
	 * the predefined regular intervals after starting the client.
	 */
	dhcp_start(netif);
	dhcp_timoutcntr = 24;
	while (((netif->ip_addr.addr) == 0) && (dhcp_timoutcntr > 0))
		xemacif_input(netif);

	if (dhcp_timoutcntr <= 0) {
		if ((netif->ip_addr.addr) == 0) {
			xil_printf("ERROR: DHCP request timed out\r\n");
			assign_default_ip(&(netif->ip_addr),
					&(netif->netmask), &(netif->gw));
		}
	}

	/* print IP address, netmask and gateway */
#else
	assign_default_ip(&(netif->ip_addr), &(netif->netmask), &(netif->gw));
#endif
	print_ip_settings(&(netif->ip_addr), &(netif->netmask), &(netif->gw));

	xil_printf("\r\n");

	/* print app header */
	print_app_header();

	/*
	 * initialization
	*/
	/* start the application*/
	start_application();
	init_vdma();
	init_tpg();

	//xil_printf("\r\n");
	while (1) {
		//xil_printf("%d \r\n",i);
		/*if (TcpFastTmrFlag) {
			tcp_fasttmr();
			TcpFastTmrFlag = 0;
		}
		if (TcpSlowTmrFlag) {
			tcp_slowtmr();
			TcpSlowTmrFlag = 0;
		}*/
		xemacif_input(netif);
		//  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		//transfer_data(buf, 5);
		//xil_printf("%d %d\r\n",WriteOneFrameEnd[0],WriteOneFrameEnd[1]);
		if(WriteOneFrameEnd[0] >= 0)
				{

					int index = WriteOneFrameEnd[0];
					int sn = 0;
					int cot;
					Xil_DCacheInvalidateRange((u32)pFrames0[index], frame_length_curr);
					// Separate camera 1 frame in package
					for(int i=0;i<frame_length_curr;i+=UDP_BUFF_SIZE)
					{
						if((i+UDP_BUFF_SIZE)>=frame_length_curr)
						{
							cot = frame_length_curr-i;
							transfer_data((const char *)pFrames0[index]+i, 0,++sn,cot);
						}
						else
						{

							transfer_data((const char *)pFrames0[index]+i, 0,++sn,UDP_BUFF_SIZE);

						}

					}
					WriteOneFrameEnd[0] = -1;
				}
				// Separate camera 2 frame in package
				if(WriteOneFrameEnd[1] >= 0)
				{

					int index = WriteOneFrameEnd[1];
					int sn = 0;
					int cot;
					Xil_DCacheInvalidateRange((u32)pFrames1[index], frame_length_curr);
					for(int i=0;i<frame_length_curr;i+=UDP_BUFF_SIZE)
					{
						if((i+UDP_BUFF_SIZE)>=frame_length_curr)
						{
							cot = frame_length_curr-i;
							transfer_data((const char *)pFrames1[index]+i,1,++sn, cot);
						}
						else
						{
							transfer_data((const char *)pFrames1[index]+i,1,++sn, UDP_BUFF_SIZE);
						}
					}
					WriteOneFrameEnd[1] = -1;
				}
	}

	/* never reached */
	cleanup_platform();

	return 0;
}






/***********************************************************
 * callback functions for VDMA interrupt
 * ---------------------------------------
 * The frame counter interrupt is registered in init_vdma()
 *
*************************************************************/
static void WriteCallBack0(void *CallbackRef, u32 Mask)
{
	if (Mask & XAXIVDMA_IXR_FRMCNT_MASK)
	{
		if(WriteOneFrameEnd[0] >= 0)
		{
			return;
		}
		int hold_rd = rd_index[0];
		if(wr_index[0]==2)
		{
			wr_index[0]=0;
			rd_index[0]=2;
		}
		else
		{
			rd_index[0] = wr_index[0];
			wr_index[0]++;
		}
		/* Set park pointer */
		XAxiVdma_StartParking((XAxiVdma*)CallbackRef, wr_index[0], XAXIVDMA_WRITE);
		WriteOneFrameEnd[0] = hold_rd;
	}
}

static void WriteCallBack1(void *CallbackRef, u32 Mask)
{

	if (Mask & XAXIVDMA_IXR_FRMCNT_MASK)
	{
		if(WriteOneFrameEnd[1] >= 0)
		{
			return;
		}
		int hold_rd = rd_index[1];
		if(wr_index[1]==2)
		{
			wr_index[1]=0;
			rd_index[1]=2;
		}
		else
		{
			rd_index[1] = wr_index[1];
			wr_index[1]++;
		}
		/* Set park pointer */
		XAxiVdma_StartParking((XAxiVdma*)CallbackRef, wr_index[1], XAXIVDMA_WRITE);
		WriteOneFrameEnd[1] = hold_rd;
	}
}

static void WriteErrorCallBack(void *CallbackRef, u32 Mask)
{

	if (Mask & XAXIVDMA_IXR_ERROR_MASK) {
		WriteError += 1;
	}
}

