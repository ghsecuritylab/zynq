build uboot + linux kernel + ramdisk + device tree for xilinx zynq

output files:
-uImage
-BOOT.bin
-system.dtb
-rootfs.cpio.uboot

***DISCLAIMER***
This is a general guideline. You WILL come across problems, but if you're really building an embedded linux from scratch, you should be able to fix the problems.
***

---buildroot---
1. clone buildroot repo and configure using "make menuconfig"
2. configure buildroot to also build linux kernel and configure specific linux kernel repo, linux xilinx kernel: https://github.com/Xilinx/linux-xlnx
3. default config files are a good start
3.1 special config we used for our picozed: BR2_ROOTFS_POST_BUILD_SCRIPT="board/telemic/drone/pre-image.sh" and BR2_ROOTFS_POST_IMAGE_SCRIPT="board/telemic/drone/post-image.sh"
3.2 int board/telemic/drone allow these for further customization:
		pre-image.sh:
			#!/bin/sh

			rm output/target/etc/resolv.conf
			cp -av board/telemic/drone/rootfs-extra/* output/target/ 

		post-image.sh:
			#!/bin/sh

		rootfs-extra/etc/resolv.conf
			nameserver 192.168.137.1

		rootfs-extra/etc/network/interfaces
			# interface file auto-generated by buildroot

			auto eth0
			iface eth0 inet static
				address 192.168.137.116
				netmask 255.255.255.0
				gateway 192.168.137.1

			auto lo
			iface lo inet loopback

		rootfs-extra/etc/init.d/S99custom
			#!/bin/sh

			case "$1" in
			        start)
			            mount /dev/mmcblk0p1 /mnt

			            cd /mnt
				    setsid nohup ./autostart.sh &            
			            ;;
			        stop)
			            killall -9 python
			            umount /mnt
			            sync
			            ;;
			        restart|reload)
			                $0 stop
			                $0 start
			                ;;
			        *)
			                echo "Usage: $0 {start|stop|restart}"
			                exit 1
			esac

			exit 0

4. compile using: "make ARCH=arm", this should produce a rootfs.cpio.uboot and an uImage in output/images
5. buildroot also generates a crosscompiler in output/host/bin, it is advisable to add this to your PATH, you can use it to compile c-code for your board

---device tree blob---
6. start from https://github.com/analogdevicesinc/linux/tree/master/arch/arm/boot/dts and find appropriate dts and dtsi files for the board. (make sure to check different git branches)
7. generate system.dtb using: "dtc -I dts -O dtb -o system.dtb zynq-picozed-sdr2-fmc.dts -i ."

---boot file---
8. clone https://github.com/Xilinx/u-boot-xlnx and configure using "make menuconfig"
9. enable support for uImage
10. boot environment variables can be set in include/configs/zynq-common.h: "ramdisk_image=rootfs.cpio.uboot" and "devicetree_image=system.dtb" are major
11. if problems with sd slot, possible problem is wrong slot selected in default device tree --> change CONFIG_DEFAULT_DEVICE_TREE="zynq-picozed" to CONFIG_DEFAULT_DEVICE_TREE="zynq-zybo"
12. compile using "make ARCH=arm CROSS_COMPILE=arm-<buildrootnamehere>-linux-uclibcgnueabihf-" to specify that the crosscompiler build by buildroot is used.
13. this generates a u-boot file, rename this to u-boot.elf
14. open vivado and File>export>hardware after bitstream has been generated
15. File>Launch SDK
16. in SDK Xilinx>Create Boot Image
17. Choose output bif and output bin file paths.
18. add 1 partition (this should be a bootloader partition): <vivado project>.sdk/Zynq_FSBL/Debug/Zynq_FSBL.elf, 1 partition: <vivado project>.runs/impl_1/system_top.bit and 1 partition with <path to u-boot.elf>/u-boot.elf
19. Create Image to creat a BOOT.bin file

copy all 4 of these output files to the SD_card and enjoy your embedded linux which programs FPGA on boot. buildroot should be able to generate all 4 of them but I didn't care to look into that.
